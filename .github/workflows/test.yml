name: Build & Test
permissions:
  contents: read
  pull-requests: write
on: [push, pull_request]

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always

jobs:
  rustfmt:
    name: Rustfmt and Clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt
      - uses: Swatinem/rust-cache@v2
      - name: Rustfmt
        run: cargo fmt --all -- --check --verbose
      - name: Clippy
        run: cargo clippy --workspace --all-features -- -D warnings

  windows-msvc:
    strategy:
      fail-fast: false
      matrix:
        channel: [1.85.0, stable, nightly]
    runs-on: windows-latest
    name: Windows - Rust ${{ matrix.channel }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.channel }}
          target: i686-pc-windows-msvc, x86_64-pc-windows-msvc
      - uses: Swatinem/rust-cache@v2
      - name: i686 Test workspace
        run: cargo test --target i686-pc-windows-msvc --workspace --verbose
      - name: x86_64 Test workspace
        run: cargo test --target x86_64-pc-windows-msvc --workspace --verbose

  windows-gnu:
    strategy:
      fail-fast: false
      matrix:
        channel: [1.85.0, stable, nightly]
        toolchain: [x86_64-pc-windows-gnu]
    runs-on: windows-latest
    name: Windows - ${{ matrix.toolchain }} - Rust ${{ matrix.channel }}
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          release: false
          path-type: inherit
          msystem: UCRT64
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.channel }}-${{ matrix.toolchain }}
      - uses: Swatinem/rust-cache@v2
      - name: Test workspace
        shell: msys2 {0}
        run: cargo test --workspace --verbose

  macos:
    strategy:
      fail-fast: false
      matrix:
        channel: [1.85.0, stable, nightly]
        features: ["--no-default-features", "--features system"]
    runs-on: macos-latest
    name: macOS - ${{ matrix.channel }} ${{ matrix.features }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.channel }}
          target: aarch64-apple-darwin
      - uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: brew install autoconf automake libtool libffi
      - name: Test workspace
        run: cargo test --target aarch64-apple-darwin ${{ matrix.features }} --workspace --verbose

  linux:
    strategy:
      fail-fast: false
      matrix:
        channel: [1.85.0, stable, nightly]
        features: ["--no-default-features", "--features system"]
        target:
        - x86_64-unknown-linux-gnu
        - i686-unknown-linux-gnu
        exclude:
        - target: i686-unknown-linux-gnu
          features: "--features system"
    runs-on: ubuntu-latest
    name: Linux - ${{ matrix.channel }} ${{ matrix.features }} ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Set up compilation dependencies
        run: |
          sudo apt-get install -y gcc-13-i686-linux-gnu
          CC="i686-linux-gnu-gcc-13"
          echo "CC=${CC}" >> $GITHUB_ENV
          echo "CARGO_TARGET_I686_UNKNOWN_LINUX_GNU_LINKER=${CC}" >> $GITHUB_ENV
        if: ${{ 'i686-unknown-linux-gnu' == matrix.target }}
      - name: Test workspace
        run: cargo test --target ${{ matrix.target }} ${{ matrix.features }} --workspace --verbose

  linux-qemu:
    strategy:
      fail-fast: false
      matrix:
        channel: [1.85.0, stable, nightly]
        target:
        - powerpc64le-unknown-linux-gnu
        - powerpc64-unknown-linux-gnu 
        - aarch64-unknown-linux-gnu
        - armv7-unknown-linux-gnueabihf
        - riscv64gc-unknown-linux-gnu
        - s390x-unknown-linux-gnu
    runs-on: ubuntu-latest
    name: Linux - ${{ matrix.channel }} --no-default-features ${{ matrix.target }}
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.channel }}
          target: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2
      - name: Set-up Cross Compiling
        id: arch_attrs
        run: |
          # Get unique attributes for each architecture
          if [ "${{ matrix.target }}" == "powerpc64-unknown-linux-gnu" ]; then
            GCC_ARCH=powerpc64
            QEMU_ARCH=ppc64
            ABI=gnu
          elif [ "${{ matrix.target }}" == "powerpc64le-unknown-linux-gnu" ]; then
            GCC_ARCH=powerpc64le
            QEMU_ARCH=ppc64le
            ABI=gnu
          elif [ "${{ matrix.target }}" == "aarch64-unknown-linux-gnu" ]; then
            GCC_ARCH=aarch64
            QEMU_ARCH=aarch64
            ABI=gnu
          elif [ "${{ matrix.target }}" == "armv7-unknown-linux-gnueabihf" ]; then
            GCC_ARCH=arm
            QEMU_ARCH=arm
            ABI=gnueabihf
          elif [ "${{ matrix.target }}" == "riscv64gc-unknown-linux-gnu" ]; then
            GCC_ARCH=riscv64
            QEMU_ARCH=riscv64
            ABI=gnu
          elif [ "${{ matrix.target }}" == "s390x-unknown-linux-gnu" ]; then
            GCC_ARCH=s390x
            QEMU_ARCH=s390x
            ABI=gnu
          fi

          # Install cross-compiler
          sudo apt-get update
          sudo apt-get install -y \
            gcc-13-$(echo $GCC_ARCH | tr _ -)-linux-$ABI

          # Convert target triple to uppercase and replace - with _
          TARGET_TRIPLE=$(echo "${{ matrix.target }}" | tr - _)
          TARGET_TRIPLE=${TARGET_TRIPLE^^}

          CC=$GCC_ARCH-linux-$ABI-gcc-13

          # Set cross-compiler as CC and set cargo target runner as qemu
          echo "CC=$CC" >> $GITHUB_ENV
          echo "CARGO_TARGET_${TARGET_TRIPLE}_LINKER=$CC" >> $GITHUB_ENV

          sudo apt-get install -y qemu-user
          echo "CARGO_TARGET_${TARGET_TRIPLE}_RUNNER=qemu-$QEMU_ARCH -L /usr/$GCC_ARCH-linux-$ABI/" >> $GITHUB_ENV
      - name: Test workspace
        run: |
          N=2
          n=0
          passed=0
          until [ $n -ge $N ] || [ $passed -eq 1 ]; do
            if [ $n -gt 0 ]; then
              echo "Previous attempt failed, retrying"
            fi

            cargo test --target ${{ matrix.target }} --no-default-features --workspace --verbose && passed=1 || n=$((n+1))
          done

          if [ $passed -ne 1 ]; then
            echo "${N} attempts failed, failing test"
            (exit 101)
          fi
